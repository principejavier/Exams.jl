var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Exams","category":"page"},{"location":"#Exams","page":"Home","title":"Exams","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Exams.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Exams]","category":"page"},{"location":"#Exams.PrintedExam","page":"Home","title":"Exams.PrintedExam","text":"struct PrintedExam <: Exam\n    # private fields\nend\n\nThis struct holds data needed to create an exam to be printed on paper. The constructor is\n\nPrintedExam(num_permutations;languages=[ENG],headings=StandardHeadings,name=\"exam\",\n            max_permutations=10,max_questions=50,template=StandardTemplate,\n            format=[1 for i=1:10,5 for i=1:50])\n\nTipically the number of permutations, languages and headings are defined while other arguments keep default values. See example.jl in test that ilustrates the use. After creation, some problems are added calling\n\n- [`add_problem!(e::Exam,...)`](@ref)\n\nFinally, the exam is generated calling appropriate methods, namely \n\n- [`generate_tex_files(e::Exam)`](@ref)\n- [`compile_tex_files(e::Exam)`](@ref)\n\nor directly\n\n- [`generate_pdf_files(e::Exam)`](@ref)\n\n\n\n\n\n","category":"type"}]
}
